@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Live Brain Sourcing</h1>            
<div class="wrap">
    <div class="row">
        <div class="span6 offset3">
            <div class="error label label-important" style="display: none">
            </div>
        </div>
    </div>  
 
    <div class="es-zoomer" />
</div>            
        

@section scripts{
    <script src="~/Scripts/jquery.signalR-1.0.1.js"></script>
    <script src="~/signalr/hubs"></script>
    

    <script type="text/javascript">
        $(function () {

            $("#start-projection").click(function () {

                var charts = new es.Charts();            
                
                projection = new liveEmoProjection({
                    onStateUpdated: function (state) {
                        charts.update(state);
                    }
                });

                projection.start();
            });


            es.Charts = function () {
                var newDataEvent = "es.newStats";
                var timeSeriesClass = "es-time-series";
                var chartTitleClass = "es-chart-title-js";
                var appendToSelector = ".wrap";
                var sessionSelectClass = "emo-sessions"
                var initialised = false;
                
                return {
                    update: update                   
                };

                function reset() {
                    initialised = false;
                    onReset;
                    clearCharts();
                }

                function clearCharts() {
                    $('.' + timeSeriesClass).remove();
                }

                function update(stats) {
                    if (!stats.StateEvent) {
                        return;
                    }
                    if (initialised) {
                        publishNewStat(stats);
                    }
                    else {
                        var zoomer = prepareZoomer({ onPlay: projection.start, onStop: projection.stop });
                        setUpTimeSeries({ zoomer: zoomer });
                        bindCharts(stats);
                        initialised = true;
                    }
                }

                function error(xhr, status, err) {
                    if (unloading)
                        return;
                    var msg = es.util.formatError("Couldn't build charts.", xhr);
                    $(".error").text(msg).show();
                };

                function prepareZoomer(sets) {
                    var zoomer = new es.Zoomer({
                        getNext: function (el) {
                            return getRelativeEl(el, 1);
                        },
                        getPrev: function (el) {
                            return getRelativeEl(el, -1);
                        },
                        onStop: sets.onStop,
                        onPlay: sets.onPlay
                    });
                    return zoomer;

                    function getRelativeEl(el, offset) {
                        var allElems = getAllElems();
                        var index = allElems.index(el);
                        if (index < 0)
                            return null;
                        var relative = allElems[index + offset] || null;
                        return relative;
                    }
                }

                function setUpTimeSeries(sets) {
                    es.TimeSeries.setUp({
                        updateEvent: newDataEvent,
                        className: timeSeriesClass,
                        titleClassName: chartTitleClass,
                        appendTo: appendToSelector,
                        maxLength: 50,
                        zoomer: sets.zoomer
                    });
                }

                function bindCharts(stats) {
                    for (var statName in stats) {
                        (function () {
                            if (statName === "StateEvent") return;
                            var currentStatName = statName; // closure
                            var stat = stats[currentStatName];
                            es.TimeSeries({
                                title: currentStatName,
                                getData: function (data) {
                                    return data[currentStatName];
                                }
                            });

                        })();
                    }
                }

                function publishNewStat(stat) {
                    $(document).trigger(newDataEvent, [stat]);
                };


                function getAllElems() {
                    // get all elements with timeseries class inside element to which they were appended
                    var allElems = $(appendToSelector + " ." + timeSeriesClass);
                    return allElems;
                }
                

                var unloading = false;  // hack around ajax errors
                $(window).bind('beforeunload', function () {
                    unloading = true;
                });
            }


            function liveEmoProjection(options) {
                var onStateUpdated = options.onStateUpdated || function () { };
                var host = options.host;

                return es.projection({
                    hub: $.connection.liveEmotivSessionHub,
                    body: function () {
                        fromCategory("EmoSession").when({
                            $init: function () {
                                var state = {};
                                state["StateEvent"] = "";
                                state["Excitement Short Term Score"] = 0;
                                state["Excitement Long Term Score"] = 0;
                                state["Frustration Score"] = 0;
                                state["Engagement Boredom Score"] = 0;
                                state["Meditation Score"] = 0;
                                state["Clench Extent"] = 0;
                                state["Eyebrow Extent"] = 0;
                                state["Left Eye Lid"] = 0;
                                state["Right Eye Lid"] = 0;
                                state["Left Eye Location"] = 0;
                                state["Right Eye Location"] = 0;
                                state["Smile Extent"] = 0;
                                return state;
                            },
                            AffectivEmoStateUpdated: function (state, event) {
                                var body = event.body;
                                state["StateEvent"] = "AffectiveEmoStateUpdated";
                                state["Excitement Short Term Score"] = body.ExcitementShortTermScore;
                                state["Excitement Long Term Score"] = body.ExcitementLongTermScore;
                                state["Frustration Score"] = body.FrustrationScore;
                                state["Engagement Boredom Score"] = body.EngagementBoredomScore;
                                state["Meditation Score"] = body.MeditationScore;
                                return state;
                            },
                            ExpressivEmoStateUpdated: function (state, event) {
                                var body = event.body;
                                state["StateEvent"] = "ExpressivEmoStateUpdated";
                                state["Clench Extent"] = body.ClenchExtent;
                                state["Eyebrow Extent"] = body.EyebrowExtent;
                                state["Left Eye Lid"] = body.LeftEyelid;
                                state["Right Eye Lid"] = body.RightEyelid;
                                state["Left Eye Location"] = body.LeftEyeLocation;
                                state["Right Eye Location"] = body.RightEyeLocation;
                                state["Smile Extent"] = body.SmileExtent;
                                return state;
                            }
                        });
                    },
                    onStateUpdate: function (state) {
                        onStateUpdated(state);
                    }
                });
            }
        });

            
    </script>
}

<button id="start-projection">Start Projection </button>
<p>There is currently no live session.</p>
        